#include<stdio.h>
#include<stdlib.h>
#define MAX_SIZE 10
typedef struct{
	int key;
}element;
element heap[MAX_SIZE];
int n=0;
void insert(element item)
{
	if(n==MAX_SIZE-1)
		printf("Heap is full\n");
	else
	{
		int i=++n;
		while(i!=1 && item.key>heap[i/2].key)
		{
			heap[i]=heap[i/2];
			i=i/2;
		}
		heap[i]=item;
	}
}
element delete()
{
	element item;
	if(n==0)
	{
		printf("Heap is empty\n");
		item.key=-1;
		return item;
	}
	else
	{
		int parent=1;
		int child=2;
		element temp;
		item=heap[1];
		temp=heap[n];
		n--;
		while(child<=n)
		{
			if(child<n && heap[child].key<heap[child+1].key)
				child++;
			if(temp.key>=heap[child].key)
				break;
			heap[parent]=heap[child];
			parent=child;
			child=child*2;
		}
		heap[parent]=temp;
		return item;
	}
}
void display()
{
	if(n==0)
	{
		printf("Heap is empty\n");
		return;
	}
	int i;
	for(i=1;i<=n;i++)
		printf("%d\t",heap[i].key);
	printf("\n");
}
void main()
{
	int choice;
	element item;
	while(1)
	{
		printf("Select any operation\n1. Insert\n2. Delete\n3. Display\n4. Exit\n");
		scanf("%d",&choice);
		switch(choice)
		{
			case 1:	printf("Enter the element\n");
				scanf("%d",&item.key);
				insert(item);
				break;
			case 2:	item=delete();
				if(item.key!=-1)
					printf("Element deleted is %d\n",item.key);
				break;
			case 3:	display();
				break;
			case 4: exit(1);
				break;
			default:printf("Invalid choice\n");
		}
	}
}

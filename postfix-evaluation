#include<stdio.h>
#include<stdlib.h>
typedef enum{
	lparen,rparen,plus,minus,multiply,divide,mod,eos,operand
}precedence;
char expr[100];
int stack[100];
int top=-1;
void push(int token)
{
	stack[++top]=token;
}
int pop()
{
	return stack[top--];
}
void printToken(precedence token)
{
	switch(token)
	{
		case lparen:	printf("(");break;
		case rparen:	printf(")");break;
		case plus:	printf("+");break;
		case minus:	printf("-");break;
		case multiply:	printf("*");break;
		case divide:	printf("/");break;
		case mod:	printf("%");break;
		case eos:	printf(" ");break;
	}
}
precedence getToken(char *symbol,int *n)
{
	*symbol=expr[*n];
	(*n)++;
	switch(*symbol)
	{
		case '(':return lparen;
		case ')':return rparen;	
		case '+':return plus;
		case '-':return minus;
		case '*':return multiply;
		case '/':return divide;
		case '%':return mod;
		case ' ':return eos;
		case '\0':return eos;
		default:return operand;
	}
}
int eval()
{
	precedence token;
	char symbol;
	int op1,op2;
	int n=0;
	token=getToken(&symbol,&n);
	while(token!=eos)
	{
		if(token==operand)
			push(symbol-'0');
		else
		{
			op2=pop();
			op1=pop();
			switch(token)
			{
				case lparen:	break;
				case rparen:	break;
				case plus:	push(op1+op2);break;
				case minus:	push(op1-op2);break;
				case multiply:	push(op1*op2);break;
				case divide:	push(op1/op2);break;
				case mod:	push(op1%op2);break;
				case eos:	break;
				case operand:	break;
			}
		}
		token=getToken(&symbol,&n);
	}
	return pop();
}
void main()
{
	printf("Enter the postfix expression\n");
	scanf("%s",expr);
	int res=eval();
	printf("Result is %d\n",res);
}
